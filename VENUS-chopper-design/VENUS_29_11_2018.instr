/*******************************************************************************
*
* Instrument: VENUS
*
* %Identification
* Written by: Ken Herwig, ORNL (modified by A.C.Geoghegan, ORNL)
* Current version: U. Wildgruber, ORNL, 29/11/2018
*
* this is a simple optics design for an imaging instrument at SNS
* beam line 10, inclined view of the top upstream, decoupled/poisoned moderator
* this is a no guide design, two aperture location, straight view of the moderator 
* beam line
*
* This version will be modified to accomodate what Hassina needs to be tested 
* to complete the DCD. Focus is on what accuracy is needed 
* when optical components are placed along the beamline. (CUW Aug. 2018)
*
* Modification: Add parameters relevant for alignment test to instrument definition; (CUW Sept./2018)
*               At the moment this version is intended for a brute force approach to scan the parameter space
*               (BSI and COll deviations in 'x') to look into error stacking...
* 
*               detector size reduced to 225 x 225 pixel  (CUW 19/09/18)
*
*               Now that I have a patch to use a larger Image_detector (without the irq lockup beyond 127 cores!)
*               I go with 513 * 513 for now...
*
* Input parameter L/D sets the apertures at 6 and 7 m
*
* %End
*******************************************************************************/

DEFINE INSTRUMENT VENUS_R18_c(int LoverD, double d_from_det,
                                          double CVI_A1_x = 0.0000, CVI_A2_x = 0.0000,
                                          double CVI_A1_y = 0.0000, CVI_A2_y = 0.0000,
                                          double SI_A1_x = 0.0000, SI_A2_x = 0.0000, SI_A3_x = 0.0000,
                                          double SI_A1_y = 0.0000, SI_A2_y = 0.0000, SI_A3_y = 0.0000,
                                          double BSI_A1_x = 0.0000, BSI_A2_x = 0.0000,
                                          double BSI_A1_y = 0.0000, BSI_A2_y = 0.0000,
                                          double Coll_A1_x = 0.0000, Coll_A2_x = 0.0000,
                                          double Coll_A1_y = 0.0000, Coll_A2_y = 0.0000)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
  double focus_d, focus_x, focus_y;
  double BSI_A1_rad,BSI_A2_rad,Coll_A1_rad,Coll_A2_rad,d_mask;
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
  if (LoverD == 400)
  {
     BSI_A1_rad = 0.03791;   // original...
     //BSI_A1_rad = 0.04952; // what I think it should be...
     BSI_A2_rad = 0.03809;   // original...
     //BSI_A2_rad = 0.04991; // what I think it should be...
     Coll_A1_rad = 0.05300;
     Coll_A2_rad = 0.05789;
     focus_d = 2.4840;
     focus_x = 0.02856;
     focus_y = 0.02856;
     puts("Confirmed: L/D == 400");
  }

  else if (LoverD == 800)
  {
     BSI_A1_rad = 0.01281;
     BSI_A2_rad = 0.01303;
     Coll_A1_rad = 0.03156;
     Coll_A2_rad = 0.03764;
     focus_d = 4.5;
     focus_x = BSI_A1_rad;
     focus_y = BSI_A1_rad;
     puts("Confirmed: L/D == 800");          
  }

  else if (LoverD == 1400)
  {
     BSI_A1_rad = 0.007321;
     BSI_A2_rad = 0.007553;
     Coll_A1_rad = 0.026867;
     Coll_A2_rad = 0.033213;
     focus_d = 4.5;
     focus_x = BSI_A1_rad;
     focus_y = BSI_A1_rad;
     puts("Confirmed: L/D == 1400");
  }
  else
  {
     BSI_A1_rad = 0.005125;
     BSI_A2_rad = 0.005360;
     Coll_A1_rad = 0.02499;
     Coll_A2_rad = 0.03144;
     focus_d = 4.5;
     focus_x = BSI_A1_rad;
     focus_y = BSI_A1_rad;
     puts("Confirmed: L/D == 2000");
  }
  d_mask = 25.00 - d_from_det - 0.000001;
  printf("mask distance from moderator is: %f\n",d_mask);

%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

COMPONENT Origin = Arm()
  AT (0,0,0) ABSOLUTE

COMPONENT Progress = Progress_bar()
  AT (0,0,0) RELATIVE Origin

Component Moderator = Source_simple(yheight=0.120, xwidth=0.092, dist= focus_d, focus_xw=focus_x, focus_yh=focus_y, 
    E0=81.793, dE=0.818)
  AT (0,0,0) RELATIVE Origin

/* these are apertures in Core vessel */

//Component Source_Detector = PSD_monitor(nx=2800,ny=1990, filename = "Source_monitor",
//Component Source_Detector = PSD_monitor(nx=512,ny=364, filename = "Source_monitor",
//    xwidth=0.14, yheight=0.0995, restore_neutron = 1)
//  AT (0,0, 1.00) RELATIVE Origin

Component CV_A1 = Slit(radius=0.03831)
  AT (CVI_A1_x, CVI_A1_y, 1.1921) RELATIVE Origin

Component CV_A2 = Slit(radius=0.02912)
  AT (CVI_A2_x, CVI_A2_y, 2.4105) RELATIVE Origin

/* these three are the aperture in the shutter, always present and define L/D = 400   */
/* rotation of SI simulated by shifting SI_A1 and SI_A3 in opposite direction base on the distance to SI_A2 */

Component SI_A1 = Slit(radius=0.02856)
  AT (SI_A1_x, SI_A1_y, 2.4840) RELATIVE Origin
 
Component SI_A2 = Slit(radius=0.02806)
  AT (SI_A2_x, SI_A2_y, 2.5500) RELATIVE Origin
 
Component SI_A3 = Slit(radius=0.03670)
  AT (SI_A3_x, SI_A3_y, 4.2620) RELATIVE Origin
 
/* these are the second location apertures for L/D >400) */


Component BSI_A1 = Slit(radius=BSI_A1_rad)
  AT (BSI_A1_x, BSI_A1_y, 4.50) RELATIVE Origin
 
Component BSI_A2 = Slit(radius=BSI_A2_rad)
  AT (BSI_A2_x, BSI_A2_y, 4.5354) RELATIVE Origin

/* collimator */

Component Coll_A1 = Slit(radius=Coll_A1_rad)
  AT (Coll_A1_x, Coll_A1_y, 7.488) RELATIVE Origin

Component Coll_A2 = Slit(radius=Coll_A2_rad)
  AT (Coll_A2_x, Coll_A2_y, 8.458) RELATIVE Origin
 
/* Simulated sample */

/* Horizontal resolution i.e. vertical stripes... */
/* ================================ */
//Component Mask_1 = ResolutionMask_Fine_R2()
//  AT (0, 0, d_mask) RELATIVE Origin 
//  ROTATED (0, 0, 0) RELATIVE Origin

/* Vertical resolution i.e. horizontal stripes... */
/* ================================ */
//Component Mask_1 = ResolutionMask_Fine_R2()
//  AT (0, 0, d_mask) RELATIVE Origin 
//  ROTATED (0, 0, 90.0) RELATIVE Origin

/* Detector  */
/* ========  */
//Component Image_Detector = PSD_monitor(nx = 225, ny = 225, filename = "PSD_output_file.sim",
//Component Image_Detector = PSD_monitor(nx = 1025, ny = 1025, filename = "PSD_output_file.sim",
Component Image_Detector = PSD_monitor(nx = 513, ny = 513, filename = "PSD_output_file.sim",
                                       xwidth = 0.45, yheight = 0.45, restore_neutron = 1)
  AT (0, 0, 25.00) RELATIVE Origin

//Component Sanity_check = Monitor(xmin=-0.05, xmax = 0.05, ymin = -0.05, ymax = 0.05)
//  AT (0,0,25.01) RELATIVE Origin

/*Component See_penumbra = PSD_monitor(
	nx=500, ny=500, filename = PSD_output_file, 
	xmin = -0.25, xmax = 0.25, ymin = -0.25, ymax = 0.25)
  AT (0,0,25) RELATIVE Origin
*/

/*Component See_mask = PSD_monitor(
	nx = 400, ny = 400, filename = PSD_output_file,
	xmin = -0.20, xmax = 0.20, ymin = -0.20, ymax = 0.20)
  AT (0,0,25) RELATIVE Origin
*/

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END




































